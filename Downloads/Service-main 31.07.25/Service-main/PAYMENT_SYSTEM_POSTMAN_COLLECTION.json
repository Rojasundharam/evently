{
  "info": {
    "name": "JKKN Payment System - Complete Testing Collection",
    "description": "Comprehensive collection for testing HDFC payment integration with replay attack protection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "order_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "transaction_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "signature",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Payment Flow",
      "item": [
        {
          "name": "Create Payment Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.order_id) {",
                  "        pm.collectionVariables.set('order_id', response.order_id);",
                  "        console.log('Order ID set:', response.order_id);",
                  "    }",
                  "    if (response.database_session_id) {",
                  "        pm.collectionVariables.set('session_id', response.database_session_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"ORD{{$timestamp}}{{$randomInt}}\",\n  \"amount\": \"10.00\",\n  \"customerEmail\": \"test@jkkn.ac.in\",\n  \"customerPhone\": \"+919876543210\",\n  \"customerName\": \"Test User\",\n  \"description\": \"Test payment for development\",\n  \"returnUrl\": \"{{base_url}}/api/payment/response\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/payment/session",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "session"]
            },
            "description": "Create a new payment session with HDFC SmartGateway"
          }
        },
        {
          "name": "Simulate HDFC Payment Response (Success)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    console.log('Payment response processed successfully');",
                  "    // Extract transaction ID from response if available",
                  "    const responseText = pm.response.text();",
                  "    const transactionMatch = responseText.match(/transaction_id=([^&]+)/);",
                  "    if (transactionMatch) {",
                  "        pm.collectionVariables.set('transaction_id', transactionMatch[1]);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "status",
                  "value": "CHARGED",
                  "type": "text"
                },
                {
                  "key": "order_id",
                  "value": "{{order_id}}",
                  "type": "text"
                },
                {
                  "key": "signature",
                  "value": "test_signature_{{$randomAlphaNumeric}}",
                  "type": "text"
                },
                {
                  "key": "status_id",
                  "value": "21",
                  "type": "text"
                },
                {
                  "key": "signature_algorithm",
                  "value": "HMAC-SHA256",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/payment/response",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "response"]
            },
            "description": "Simulate successful HDFC payment response"
          }
        },
        {
          "name": "Simulate HDFC Payment Response (Failed)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "status",
                  "value": "FAILED",
                  "type": "text"
                },
                {
                  "key": "order_id",
                  "value": "{{order_id}}",
                  "type": "text"
                },
                {
                  "key": "signature",
                  "value": "failed_signature_{{$randomAlphaNumeric}}",
                  "type": "text"
                },
                {
                  "key": "status_id",
                  "value": "99",
                  "type": "text"
                },
                {
                  "key": "signature_algorithm",
                  "value": "HMAC-SHA256",
                  "type": "text"
                },
                {
                  "key": "failure_reason",
                  "value": "Insufficient funds",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/payment/response",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "response"]
            },
            "description": "Simulate failed HDFC payment response"
          }
        }
      ],
      "description": "Standard payment flow testing"
    },
    {
      "name": "2. Security Testing - Replay Attacks",
      "item": [
        {
          "name": "Test Replay Attack (Duplicate Order ID)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This should return 409 Conflict due to replay attack protection",
                  "pm.test('Replay attack detected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([409, 400]);",
                  "});",
                  "",
                  "pm.test('Security error response', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('duplicate');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "status",
                  "value": "CHARGED",
                  "type": "text"
                },
                {
                  "key": "order_id",
                  "value": "{{order_id}}",
                  "type": "text",
                  "description": "Reusing the same order ID to trigger replay attack detection"
                },
                {
                  "key": "signature",
                  "value": "duplicate_signature_test",
                  "type": "text"
                },
                {
                  "key": "status_id",
                  "value": "21",
                  "type": "text"
                },
                {
                  "key": "signature_algorithm",
                  "value": "HMAC-SHA256",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/payment/response",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "response"]
            },
            "description": "Test replay attack protection by reusing the same order ID"
          }
        },
        {
          "name": "Test Signature Replay Attack",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Signature replay detected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([409, 400]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "status",
                  "value": "CHARGED",
                  "type": "text"
                },
                {
                  "key": "order_id",
                  "value": "ORD{{$timestamp}}{{$randomInt}}",
                  "type": "text"
                },
                {
                  "key": "signature",
                  "value": "test_signature_duplicate",
                  "type": "text",
                  "description": "Reusing the same signature to trigger replay detection"
                },
                {
                  "key": "status_id",
                  "value": "21",
                  "type": "text"
                },
                {
                  "key": "signature_algorithm",
                  "value": "HMAC-SHA256",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/api/payment/response",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "response"]
            },
            "description": "Test signature replay attack protection"
          }
        }
      ],
      "description": "Test replay attack protection mechanisms"
    },
    {
      "name": "3. Webhook Testing",
      "item": [
        {
          "name": "HDFC Webhook - Payment Success",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-HDFC-Signature",
                "value": "webhook_signature_{{$randomAlphaNumeric}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"webhook_id\": \"webhook_{{$timestamp}}_{{$randomInt}}\",\n  \"event_type\": \"payment.success\",\n  \"order_id\": \"{{order_id}}\",\n  \"transaction_id\": \"{{transaction_id}}\",\n  \"status\": \"CHARGED\",\n  \"amount\": \"10.00\",\n  \"currency\": \"INR\",\n  \"signature\": \"webhook_signature_{{$randomAlphaNumeric}}\",\n  \"timestamp\": \"{{$isoTimestamp}}\",\n  \"merchant_id\": \"SG3095\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhook",
              "host": ["{{base_url}}"],
              "path": ["api", "webhook"]
            },
            "description": "Test HDFC webhook for successful payment"
          }
        },
        {
          "name": "Webhook Replay Attack Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Webhook replay detected', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([409, 400]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-HDFC-Signature",
                "value": "duplicate_webhook_signature"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"webhook_id\": \"duplicate_webhook_test\",\n  \"event_type\": \"payment.success\",\n  \"order_id\": \"{{order_id}}\",\n  \"transaction_id\": \"{{transaction_id}}\",\n  \"status\": \"CHARGED\",\n  \"amount\": \"10.00\",\n  \"currency\": \"INR\",\n  \"signature\": \"duplicate_webhook_signature\",\n  \"timestamp\": \"{{$isoTimestamp}}\",\n  \"merchant_id\": \"SG3095\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/webhook",
              "host": ["{{base_url}}"],
              "path": ["api", "webhook"]
            },
            "description": "Test webhook replay attack protection"
          }
        }
      ],
      "description": "Test webhook functionality and security"
    },
    {
      "name": "4. Admin & Monitoring",
      "item": [
        {
          "name": "Get Payment Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/payment/status?order_id={{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "status"],
              "query": [
                {
                  "key": "order_id",
                  "value": "{{order_id}}"
                }
              ]
            },
            "description": "Check payment status by order ID"
          }
        },
        {
          "name": "Download Receipt",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/payment/receipt?order_id={{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "receipt"],
              "query": [
                {
                  "key": "order_id",
                  "value": "{{order_id}}"
                }
              ]
            },
            "description": "Download payment receipt"
          }
        },
        {
          "name": "Admin - Get Transaction Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer admin_token",
                "description": "Replace with actual admin token"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/transaction-details?order_id={{order_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "transaction-details"],
              "query": [
                {
                  "key": "order_id",
                  "value": "{{order_id}}"
                }
              ]
            },
            "description": "Admin endpoint to get detailed transaction information"
          }
        },
        {
          "name": "Admin - Security Audit Logs",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer admin_token"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/admin/security-audit-logs?limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "admin", "security-audit-logs"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get security audit logs including replay attack detections"
          }
        }
      ],
      "description": "Admin and monitoring endpoints"
    },
    {
      "name": "5. Service Request Integration",
      "item": [
        {
          "name": "Complete Service Request After Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"{{order_id}}\",\n  \"serviceId\": \"303fe936-8d51-45e3-9eff-dcda0d804550\",\n  \"userId\": \"0239ac3b-73d0-4fce-bd97-501ed97e4408\",\n  \"transactionId\": \"{{transaction_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/payment/complete-service-request",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "complete-service-request"]
            },
            "description": "Complete service request after successful payment"
          }
        }
      ],
      "description": "Service request integration testing"
    },
    {
      "name": "6. Load Testing",
      "item": [
        {
          "name": "Bulk Payment Session Creation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Bulk session creation successful', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Store order ID for follow-up tests",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.order_id) {",
                  "        pm.collectionVariables.set('bulk_order_id_' + pm.info.iteration, response.order_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"orderId\": \"BULK_ORD{{$timestamp}}{{$randomInt}}\",\n  \"amount\": \"{{$randomInt}}.00\",\n  \"customerEmail\": \"bulk_test_{{$randomInt}}@jkkn.ac.in\",\n  \"customerPhone\": \"+91987654{{$randomInt}}\",\n  \"customerName\": \"Bulk Test User {{$randomInt}}\",\n  \"description\": \"Bulk test payment {{$randomInt}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/payment/session",
              "host": ["{{base_url}}"],
              "path": ["api", "payment", "session"]
            },
            "description": "Create multiple payment sessions for load testing"
          }
        }
      ],
      "description": "Load testing scenarios"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.collectionVariables.get('base_url')) {",
          "    pm.collectionVariables.set('base_url', 'http://localhost:3000');",
          "}",
          "",
          "// Generate unique identifiers for testing",
          "pm.globals.set('timestamp', Date.now());",
          "pm.globals.set('random_id', Math.floor(Math.random() * 1000000));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to log response details",
          "console.log('Response Status:', pm.response.code);",
          "console.log('Response Time:', pm.response.responseTime + 'ms');",
          "",
          "// Log any errors",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.text());",
          "}"
        ]
      }
    }
  ]
}