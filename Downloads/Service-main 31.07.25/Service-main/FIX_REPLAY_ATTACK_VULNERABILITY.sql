-- ============================================================================
-- FIX REPLAY ATTACK VULNERABILITY - Critical Security Fix
-- ============================================================================

-- This script addresses the critical security vulnerability where the same
-- payment gateway response can be used to create multiple transaction records.
-- This is a replay attack vulnerability that can lead to duplicate charges.

-- 1. First, let's identify duplicate transactions based on HDFC response data
SELECT 
    'Duplicate Transaction Analysis' as info,
    COUNT(*) as total_transactions,
    COUNT(DISTINCT order_id) as unique_order_ids,
    COUNT(DISTINCT (hdfc_response_raw::jsonb->>'order_id')) as unique_hdfc_order_ids,
    COUNT(DISTINCT (hdfc_response_raw::jsonb->>'signature')) as unique_signatures
FROM transaction_details 
WHERE hdfc_response_raw IS NOT NULL;

-- 2. Find transactions with duplicate HDFC order IDs (potential replay attacks)
WITH duplicate_hdfc_orders AS (
    SELECT 
        (hdfc_response_raw::jsonb->>'order_id') as hdfc_order_id,
        COUNT(*) as duplicate_count,
        MIN(created_at) as first_occurrence,
        MAX(created_at) as last_occurrence,
        array_agg(id ORDER BY created_at) as transaction_ids
    FROM transaction_details 
    WHERE hdfc_response_raw IS NOT NULL
    GROUP BY (hdfc_response_raw::jsonb->>'order_id')
    HAVING COUNT(*) > 1
)
SELECT 
    'Duplicate HDFC Order IDs Found' as info,
    hdfc_order_id,
    duplicate_count,
    first_occurrence,
    last_occurrence,
    transaction_ids
FROM duplicate_hdfc_orders
ORDER BY duplicate_count DESC;

-- 3. Find transactions with duplicate signatures (definite replay attacks)
WITH duplicate_signatures AS (
    SELECT 
        (hdfc_response_raw::jsonb->>'signature') as signature,
        COUNT(*) as duplicate_count,
        MIN(created_at) as first_occurrence,
        MAX(created_at) as last_occurrence,
        array_agg(id ORDER BY created_at) as transaction_ids
    FROM transaction_details 
    WHERE hdfc_response_raw IS NOT NULL
    GROUP BY (hdfc_response_raw::jsonb->>'signature')
    HAVING COUNT(*) > 1
)
SELECT 
    'Duplicate Signatures Found (CRITICAL)' as info,
    signature,
    duplicate_count,
    first_occurrence,
    last_occurrence,
    transaction_ids
FROM duplicate_signatures
ORDER BY duplicate_count DESC;

-- 4. Create unique constraints to prevent future replay attacks
-- Add unique constraint on HDFC order ID
DO $$
BEGIN
    -- Add unique constraint on hdfc_order_id if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'transaction_details_hdfc_order_id_unique'
    ) THEN
        ALTER TABLE transaction_details 
        ADD CONSTRAINT transaction_details_hdfc_order_id_unique 
        UNIQUE (hdfc_order_id);
        RAISE NOTICE 'Added unique constraint on hdfc_order_id';
    END IF;
    
    -- Add unique constraint on computed_signature if it doesn't exist
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'transaction_details_signature_unique'
    ) THEN
        ALTER TABLE transaction_details 
        ADD CONSTRAINT transaction_details_signature_unique 
        UNIQUE (computed_signature);
        RAISE NOTICE 'Added unique constraint on computed_signature';
    END IF;
    
    -- Add unique constraint on combination of order_id and signature
    IF NOT EXISTS (
        SELECT 1 FROM pg_constraint 
        WHERE conname = 'transaction_details_order_signature_unique'
    ) THEN
        ALTER TABLE transaction_details 
        ADD CONSTRAINT transaction_details_order_signature_unique 
        UNIQUE (order_id, computed_signature);
        RAISE NOTICE 'Added unique constraint on order_id + computed_signature';
    END IF;
    
EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error adding constraints: %', SQLERRM;
END $$;

-- 5. Clean up duplicate transactions (keep only the first occurrence)
WITH duplicate_transactions AS (
    SELECT 
        id,
        order_id,
        (hdfc_response_raw::jsonb->>'order_id') as hdfc_order_id,
        (hdfc_response_raw::jsonb->>'signature') as signature,
        created_at,
        ROW_NUMBER() OVER (
            PARTITION BY (hdfc_response_raw::jsonb->>'order_id'), (hdfc_response_raw::jsonb->>'signature')
            ORDER BY created_at
        ) as rn
    FROM transaction_details 
    WHERE hdfc_response_raw IS NOT NULL
)
DELETE FROM transaction_details 
WHERE id IN (
    SELECT id 
    FROM duplicate_transactions 
    WHERE rn > 1
);

-- 6. Add security audit log entries for replay attack attempts
-- First ensure the vulnerability_type column exists
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'security_audit_log' 
        AND column_name = 'vulnerability_type'
    ) THEN
        ALTER TABLE security_audit_log 
        ADD COLUMN vulnerability_type VARCHAR(100);
        RAISE NOTICE 'Added vulnerability_type column to security_audit_log';
    END IF;
END $$;

INSERT INTO security_audit_log (
    event_type,
    severity,
    event_description,
    order_id,
    vulnerability_type,
    event_data
)
SELECT 
    'REPLAY_ATTACK_DETECTED',
    'CRITICAL',
    'Duplicate transaction detected - potential replay attack',
    order_id,
    'REPLAY_ATTACK',
    jsonb_build_object(
        'hdfc_order_id', (hdfc_response_raw::jsonb->>'order_id'),
        'signature', (hdfc_response_raw::jsonb->>'signature'),
        'duplicate_count', (
            SELECT COUNT(*) 
            FROM transaction_details td2 
            WHERE (td2.hdfc_response_raw::jsonb->>'order_id') = (td1.hdfc_response_raw::jsonb->>'order_id')
            AND (td2.hdfc_response_raw::jsonb->>'signature') = (td1.hdfc_response_raw::jsonb->>'signature')
        ),
        'created_at', created_at
    )
FROM transaction_details td1
WHERE EXISTS (
    SELECT 1 
    FROM transaction_details td2 
    WHERE td2.id != td1.id
    AND (td2.hdfc_response_raw::jsonb->>'order_id') = (td1.hdfc_response_raw::jsonb->>'order_id')
    AND (td2.hdfc_response_raw::jsonb->>'signature') = (td1.hdfc_response_raw::jsonb->>'signature')
);

-- 7. Add timestamp validation to prevent old response replay
ALTER TABLE transaction_details 
ADD COLUMN IF NOT EXISTS response_timestamp TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS replay_protection_nonce VARCHAR(64);

-- 8. Update existing transactions with timestamp and nonce
UPDATE transaction_details 
SET 
    response_timestamp = created_at,
    replay_protection_nonce = 'NONCE_' || SUBSTRING(id::text FROM 1 FOR 8) || '_' || EXTRACT(EPOCH FROM created_at)::text
WHERE response_timestamp IS NULL;

-- 9. Create function to validate transaction uniqueness
CREATE OR REPLACE FUNCTION validate_transaction_uniqueness(
    p_order_id VARCHAR,
    p_hdfc_order_id VARCHAR,
    p_signature TEXT,
    p_timestamp TIMESTAMP WITH TIME ZONE
) RETURNS BOOLEAN AS $$
DECLARE
    existing_count INTEGER;
    time_threshold INTERVAL := INTERVAL '5 minutes';
BEGIN
    -- Check if this exact combination already exists
    SELECT COUNT(*) INTO existing_count
    FROM transaction_details 
    WHERE order_id = p_order_id 
    AND hdfc_order_id = p_hdfc_order_id
    AND computed_signature = p_signature;
    
    IF existing_count > 0 THEN
        RAISE EXCEPTION 'Duplicate transaction detected - potential replay attack';
    END IF;
    
    -- Check if this signature was used recently (within 5 minutes)
    SELECT COUNT(*) INTO existing_count
    FROM transaction_details 
    WHERE computed_signature = p_signature
    AND created_at > (p_timestamp - time_threshold);
    
    IF existing_count > 0 THEN
        RAISE EXCEPTION 'Signature reuse detected within time threshold - potential replay attack';
    END IF;
    
    -- Check if this HDFC order ID was used recently
    SELECT COUNT(*) INTO existing_count
    FROM transaction_details 
    WHERE hdfc_order_id = p_hdfc_order_id
    AND created_at > (p_timestamp - time_threshold);
    
    IF existing_count > 0 THEN
        RAISE EXCEPTION 'HDFC order ID reuse detected within time threshold - potential replay attack';
    END IF;
    
    RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

-- 10. Create trigger to prevent future replay attacks
CREATE OR REPLACE FUNCTION prevent_replay_attack() RETURNS TRIGGER AS $$
BEGIN
    -- Validate transaction uniqueness before insertion
    IF NOT validate_transaction_uniqueness(
        NEW.order_id,
        NEW.hdfc_order_id,
        NEW.computed_signature,
        NEW.created_at
    ) THEN
        RETURN NULL;
    END IF;
    
    -- Set timestamp and nonce if not provided
    IF NEW.response_timestamp IS NULL THEN
        NEW.response_timestamp := NOW();
    END IF;
    
    IF NEW.replay_protection_nonce IS NULL THEN
        NEW.replay_protection_nonce := 'NONCE_' || gen_random_uuid()::text;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger if it doesn't exist
DROP TRIGGER IF EXISTS prevent_replay_attack_trigger ON transaction_details;
CREATE TRIGGER prevent_replay_attack_trigger
    BEFORE INSERT ON transaction_details
    FOR EACH ROW
    EXECUTE FUNCTION prevent_replay_attack();

-- 11. Add index for efficient replay detection
CREATE INDEX IF NOT EXISTS idx_transaction_details_replay_protection 
ON transaction_details (hdfc_order_id, computed_signature, created_at);

CREATE INDEX IF NOT EXISTS idx_transaction_details_signature_time 
ON transaction_details (computed_signature, created_at);

-- 12. Verify the security fix
SELECT 
    'Security Fix Verification' as info,
    COUNT(*) as total_transactions,
    COUNT(DISTINCT hdfc_order_id) as unique_hdfc_orders,
    COUNT(DISTINCT computed_signature) as unique_signatures,
    COUNT(CASE WHEN response_timestamp IS NOT NULL THEN 1 END) as with_timestamp,
    COUNT(CASE WHEN replay_protection_nonce IS NOT NULL THEN 1 END) as with_nonce
FROM transaction_details;

-- 13. Show security audit log entries
SELECT 
    'Security Audit Log' as info,
    event_type,
    severity,
    order_id,
    COALESCE(vulnerability_type, 'N/A') as vulnerability_type,
    created_at
FROM security_audit_log 
WHERE event_type = 'REPLAY_ATTACK_DETECTED'
ORDER BY created_at DESC
LIMIT 10;

-- 14. Final security status report
SELECT 
    'Final Security Status' as info,
    'Replay attack vulnerability has been addressed' as status,
    'Unique constraints added on hdfc_order_id and computed_signature' as constraint_status,
    'Replay protection trigger installed' as trigger_status,
    'Security audit logging enabled' as audit_status,
    'Timestamp and nonce validation implemented' as validation_status; 